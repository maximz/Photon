Recursion is the process of repeating items in a self-similar way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion. The term has a variety of meanings specific to a variety of disciplines ranging from linguistics to logic. The most common application of recursion is in mathematics and computer science, in which it refers to a method of defining functions in which the function being defined is applied within its own definition. Specifically this defines an infinite number of instances (function values), using a finite expression that for some instances may refer to other instances, but in such a way that no loop or infinite chain of references can occur. The term is also used more generally to describe a process of repeating objects in a self-similar way.
Formal definitions of recursion.
Many mathematical axioms are based upon recursive rules. For example, the formal definition of the natural numbers in set theory follows: "1 is a natural number, and each natural number has a successor, which is also a natural number." By this base case and recursive rule, one can generate the set of all natural numbers
A more humorous illustration goes: ""To understand recursion, you must first understand recursion."" Or perhaps more accurate is the following, from Andrew Plotkin: ""If you already know what recursion is, just remember the answer. Otherwise, find someone who is standing closer to Douglas Hofstadter than you are; then ask him or her what recursion is.""
Recursively defined mathematical objects include functions, sets, and especially fractals.
Informal definition.
Recursion is the process a procedure goes through when one of the steps of the procedure involves invoking the procedure itself. A procedure that goes through recursion is said to be 'recursive'.
To understand recursion, one must recognize the distinction between a procedure and the running of a procedure. A procedure is a set of steps that are to be taken based on a set of rules. The running of a procedure involves actually following the rules and performing the steps. An analogy: a procedure is like a written recipe; running a procedure is like actually preparing the meal.
Recursion is related to, but not the same as, a reference within the specification of a procedure to the execution of some other procedure. For instance, a recipe might refer to cooking vegetables, which is another procedure that in turn requires heating water, and so forth. However, a recursive procedure is where (at least) one of its steps calls for a new instance of the very same procedure, like a sourdough recipe calling for some dough left over from the last time the same recipe was made. This of course immediately creates the possibility of an endless loop; recursion can only be properly used in a definition if the step in question is skipped in certain cases so that the procedure can complete, like a sourdough recipe that also tells you how to get some starter dough in case you've never made it before. Even if properly defined, a recursive procedure is not easy for humans to perform, as it requires distinguishing the new from the old (partially executed) invocation of the procedure; this requires some administration of how far various simultaneous instances of the procedures have progressed. For this reason recursive definitions are very rare in everyday situations. An example could be the following procedure to find a way through a maze. Proceed forward until reaching either an exit or a branching point (a dead end is considered a branching point with 0 branches). If the point reached is an exit, terminate. Otherwise try each branch in turn, using the procedure recursively; if every trial fails by reaching only dead ends, return on the path that led to this branching point and report failure. Whether this actually defines a terminating procedure depends on the nature of the maze: it must not allow loops. In any case, executing the procedure requires carefully recording all currently explored branching points, and which of their branches have already been exhaustively tried.
Recursion in language.
Linguist Noam Chomsky theorizes that unlimited extension of any natural language is possible using the recursive device of embedding clauses within sentences (Aspects of the Theory of Syntax. 1965). For example, two simple sentences—""Dorothy met the Wicked Witch of the West in Munchkin Land"" and ""The Wicked Witch's sister was killed in Munchkin Land""—can be embedded in a third sentence, ""Dorothy liquidated the Wicked Witch with a pail of water,"" to obtain a recursive sentence: ""Dorothy, who met the Wicked Witch of the West in Munchkin Land where her sister was killed, liquidated her with a pail of water.""
The idea that recursion is an essential property of human language (as Chomsky suggests) is challenged by linguist Daniel Everett in his work "Cultural Constraints on Grammar and Cognition in Pirahã: Another Look at the Design Features of Human Language", in which he hypothesizes that cultural factors made recursion unnecessary in the development of the Pirahã language. This concept, which challenges Chomsky's idea that recursion is the only trait which differentiates human and animal communication, is currently under debate.
Andrew Nevins, David Pesetsky and Cilene Rodrigues provide a debate against this proposal.
Recursion in linguistics enables 'discrete infinity' by embedding phrases within phrases of the same type in a hierarchical structure. Without recursion, language does not have 'discrete infinity' and cannot embed sentences into infinity (with a 'Russian nesting doll' effect). Everett contests that language must have discrete infinity, and asserts that the Pirahã language — which he claims lacks recursion — is in fact finite. He likens it to the finite game of chess, which has a finite number of moves but is nevertheless very productive, with novel moves being discovered throughout history.
Recursive humor.
A variation is found in the index on page 269 of some editions of Kernighan and Ritchie's book "The C Programming Language"; thus the index entry recursively references itself ("recursion 86, 139, 141, 182, 202, 269"). The earliest version of this joke was in "Software Tools" by Kernighan and Plauger, and also appears in "The UNIX Programming Environment" by Kernighan and Pike. It did not appear in the first edition of "The C Programming Language".
Another joke is that "To understand recursion, you must understand recursion." In the English language version of the Google web search engine, when a search for "recursion" is made, the site suggests "Did you mean: "recursion"."
Recursive acronyms can also be examples of recursive humor. PHP, for example, stands for "PHP Hypertext Preprocessor" and WINE, for example, stands for "Wine Is Not an Emulator." GNU stands for "GNU's not Unix".
Recursion in mathematics.
Recursively defined sets.
Example: The set of true reachable propositions.
Another interesting example is the set of all "true reachable" propositions in an axiomatic system.
This set is called 'true reachable propositions' because in non-constructive approaches to the foundations of mathematics, the set of true propositions may be larger than the set recursively constructed from the axioms and rules of inference. See also Gödel's incompleteness theorems.
Functional recursion.
A function may be partly defined in terms of itself. A familiar example is the Fibonacci number sequence: "F"("n") = "F"("n" − 1) + "F"("n" − 2). For such a definition to be useful, it must lead to values which are non-recursively defined, in this case "F"(0) = 0 and "F"(1) = 1.
A famous recursive function is the Ackermann function which, unlike the Fibonacci sequence, cannot easily be expressed without recursion.
Proofs involving recursive definitions.
Applying the standard technique of proof by cases to recursively defined sets or functions, as in the preceding sections, yields structural induction, a powerful generalization of mathematical induction which is widely used to derive proofs in mathematical logic and computer science.
Recursive optimization.
Dynamic programming is an approach to optimization which restates a multiperiod or multistep optimization problem in recursive form. The key result in dynamic programming is the Bellman equation,
which writes the value of the optimization problem at an earlier time (or earlier step)
in terms of its value at a later time (or later step).
Recursion in computer science.
A common method of simplification is to divide a problem into subproblems of the same type. As a computer programming technique, this is called divide and conquer and is key to the design of many important algorithms. Divide and conquer serves as a top-down approach to problem solving, where problems are solved by solving smaller and smaller instances. A contrary approach is dynamic programming. This approach serves as a bottom-up approach, where problems are solved by solving larger and larger instances, until the desired size is reached.
unsigned int factorial(unsigned int n) {
}</source>
The function calls itself recursively on a smaller version of the input (n - 1) and multiplies the result of the recursive call by n, until reaching the base case, analogously to the mathematical definition of factorial.
Recursion in computer programming is exemplified when a function is defined in terms of simpler, often smaller versions of itself. The solution to the problem is then devised by combining the solutions obtained from the simpler versions of the problem. One example application of recursion is in parsers for programming languages. The great advantage of recursion is that an infinite set of possible sentences, designs or other data can be defined, parsed or produced by a finite computer program.
Recurrence relations are equations to define one or more sequences recursively. Some specific kinds of recurrence relation can be "solved" to obtain a non-recursive definition.
Use of recursion in an algorithm has both advantages and disadvantages. The main advantage is usually simplicity. The main disadvantage is often that the algorithm may require large amounts of memory if the depth of the recursion is very large.
The recursion theorem.
In set theory, this is a theorem guaranteeing that recursively defined functions exist. Given a set "X", an element "a" of "X" and a function formula_4, the theorem states that there is a unique function formula_5 (where formula_1 denotes the set of natural numbers including zero) such that
for any natural number "n".
Proof of uniqueness.
where "a" is an element of "X".
By Induction, formula_15 for all formula_22.
