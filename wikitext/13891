Python is a general-purpose, high-level programming language whose design philosophy emphasizes code readability. Its syntax is said to be clear and expressive. Python has a large and comprehensive standard library.
Python supports multiple programming paradigms, including object-oriented, imperative and functional programming styles. It features a fully dynamic type system and automatic memory management, similar to that of Scheme, Ruby, Perl and Tcl. Like other dynamic languages, Python is often used as a scripting language, but is also used in a wide range of non-scripting contexts. Using third-party tools, Python code can be packaged into standalone executable programs. Python interpreters are available for many operating systems.
CPython, the reference implementation of Python, is free and open source software and has a community-based development model, as do nearly all of its alternative implementations. CPython is managed by the non-profit Python Software Foundation.
History.
Python was conceived in the late 1980s and its implementation was started in December 1989 by Guido van Rossum at CWI in the Netherlands as a successor to the ABC language (itself inspired by SETL) capable of exception handling and interfacing with the Amoeba operating system. Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, "Benevolent Dictator for Life" (BDFL).
Python 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for Unicode. However, the most important change was to the development process itself, with a shift to a more transparent and community-backed process. 
Python 3.0 (also called Python 3000 or py3k), a major, backwards-incompatible release, was released on 3 December 2008 after a long period of testing. Many of its major features have been backported to the backwards-compatible Python 2.6 and 2.7.
Python has been awarded a TIOBE Programming Language of the Year award twice (in 2007 and 2010), which is given to the language with the greatest growth in popularity over the course of a year, as measured by the TIOBE index.
Features.
Python is a multi-paradigm programming language: object-oriented programming and structured programming are fully supported, and there are a number of language features which support functional programming and aspect-oriented programming (including by metaprogramming and by magic methods). Many other paradigms are supported using extensions, including design by contract and logic programming.
Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution.
The design of Python offers only limited support for functional programming in the Lisp tradition. The language has map(), reduce() and filter() functions, comprehensions for lists, dictionaries, and sets, as well as generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.
Programming philosophy.
Rather than requiring all desired functionality to be built into the language's core, Python was designed to be highly extensible. Python can also be embedded in existing applications that need a programmable interface (Embedding and extending). This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset).
While offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in Perl, in favor of a sparser, less-cluttered grammar. As Alex Martelli put it: "To describe something as clever is NOT considered a compliment in the Python culture." Python's philosophy rejects the Perl "there is more than one way to do it" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".
Python's developers strive to avoid premature optimization, and moreover, reject patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity. When speed is important, Python programmers use PyPy, a just-in-time compiler, or move time-critical functions to extension modules written in "closer to the metal" languages such as C.
Community-led development.
Python's development is conducted largely through the Python Enhancement Proposal (PEP) process. The PEP process is the primary mechanism for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python. Outstanding PEPs are reviewed and commented upon by the Python community and by Van Rossum, the Python project's Benevolent Dictator for Life (leader / language architect). 
Enhancement of the language goes along with development of the CPython reference implementation. The mailing list python-dev is the primary forum for discussion about the language's development; specific issues are discussed in the Roundup bug tracker maintained at python.org. Development takes place at the self-hosted hg.python.org.
A number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the BuildBot continuous integration system.
The community of Python developers has also contributed over 25,000 software modules to the Python Package Index (called pypi), the official repository of third-party libraries for python. 
The major academic conference on Python is named PyCon. There are special mentoring programmes like the Pyladies.
Name and neologisms.
An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name (derived from the television series "Monty Python's Flying Circus"), in the common practice of using Monty Python references in example code, and in an occasionally playful approach to tutorials and reference materials. For example, the metasyntactic variables often used in Python literature are "spam" and "eggs", instead of the traditional "foo" and "bar".
A common neologism in the Python community is "pythonic", which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called "unpythonic".
Users and admirers of Python—most especially those considered knowledgeable or experienced—are often referred to as "Pythonists", "Pythonistas", and "Pythoneers".
The prefix "Py-" is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of SDL to Python (commonly used to create games); PyS60, an implementation for the Symbian S60 operating system; PyQt and PyGTK, which bind Qt and GTK, respectively, to Python; and PyPy, a Python implementation written in Python.
Usage.
Programmers using Python and similar scripting languages are usually more productive than those using C, C++ and Java. Large organizations that make use of Python include Google, Yahoo!, CERN, NASA, ILM, and ITA. 
, Python ranks at position 7 in the TIOBE Programming Community Index. 
Python is used as a scripting language for web applications, e.g. via mod_wsgi for the Apache web server. With Web Server Gateway Interface, a standard API has been developed to facilitate these applications. Web application frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask and Zope support developers in the design and maintenance of complex applications. Pyjamas and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as data mapper to a relational database. Twisted is a framework to program communications between computers, and is used for example by Dropbox.
Libraries like NumPy, SciPy and Matplotlib allow Python to be used effectively in scientific computing. Sage is a mathematical software with a "notebook" programmable in python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus. PiCloud provides supercomputing processing capacity on the cloud, using a Python interface.
Python has been successfully embedded in a number of software products as a scripting language, including in finite element method software such as Abaqus, 3D animation packages such as Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, and 2D imaging programs like GIMP, Inkscape, Scribus and Paint Shop Pro. GNU GDB uses Python as a pretty printer to show complex structures such as C++ containers. ESRI is now promoting Python as the best choice for writing scripts in ArcGIS. It has even been used in several video games, and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.
Python has also been used in artificial intelligence tasks. Thanks to being a scripting language with module architecture, syntax simplicity and rich text processing tools, Python is often used for natural language processing tasks. 
For many operating systems, Python is a standard component; it ships with most Linux distributions, FreeBSD, NetBSD, OpenBSD and with OS X and can be used from the terminal. A number of Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage and the standard tool to access it, emerge. Pardus uses it for administration and during system boot.
Python has also seen extensive use in the information security industry, including exploit development.</ref>
Most of the Sugar software for the One Laptop per Child XO, now developed at Sugar Labs, is written in Python. 
The Raspberry Pi single-board computer project has adopted Python as its principal user programming language.
Syntax and semantics.
Python is intended to be a highly readable language. It is designed to have an uncluttered visual layout, frequently using English keywords where other languages use punctuation. Furthermore Python has a smaller number of syntactic exceptions and special cases than C or Pascal.
For a detailed description of the differences between 2.x and 3.x versions, see History of Python.
print("Hello world")
</syntaxhighlight>
Indentation.
Python uses whitespace indentation, rather than curly braces or keywords, to delimit blocks; a feature also termed the off-side rule. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. While some consider this significantly enhances readability, others have criticized it.
Statements and control flow.
Python does not support tail-call optimization nor first-class continuations, and, according to Guido van Rossum, it never will. However, better support for coroutine-like functionality is provided in 2.5, by extending Python's generators. Prior to 2.5, generators were lazy iterators; information was passed unidirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function, and as of Python 3.3, the information can be passed through multiple stack levels.
Expressions.
Python expressions are similar to languages such as C and Java.
In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to some duplication of functionality, e.g.
Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as codice_55 cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator codice_56 for an equality operator codice_22 in conditions: codice_58 is valid C code but codice_59 causes a syntax error in Python.
Methods.
Methods on objects are functions attached to the object's class; the syntax codice_60 is, for normal methods and functions, syntactic sugar for codice_61. Python methods have an explicit codice_62 parameter to access instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, Java, C++ or Ruby).
Typing.
Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.
Python allows programmers to define their own types using classes, which are most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, codice_63 or codice_64), and the classes themselves are instances of the metaclass codice_65 (itself an instance of itself), allowing metaprogramming and reflection.
Prior to version 3.0, Python had two kinds of classes: "old-style" and "new-style". Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 2.2 and 3.0, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class codice_66 is inherited from, directly or indirectly (all new-style classes inherit from codice_66 and are instances of codice_65).
Mathematics.
In contrast with some programming languages, integer division is defined to round towards minus infinity. Therefore codice_69 is 2, but codice_70 is −3. This is uniform and consistent: for instance, it means that the equation codice_71 is always true, whereas in languages such as C, codice_72. It also means that the equation codice_73 is valid for both positive and negative values of codice_74. However, maintaining the validity of this equation means that while the result of codice_75 is, as expected, in the half-open interval where codice_76 is a positive integer, it has to lie in the interval ("b",0 when codice_76 is negative.
Python provides a codice_78 function for rounding floats to integers. Versions before 3 use round-away-from-zero: codice_79 is 1.0, codice_80 is −1.0. Python 3 uses round-to-even: codice_81 is 2.0, codice_82 is 2.0. The codice_83 type/class in module codice_84 (since version 2.4) provides exact numerical representation and several rounding modes.
Python allows boolean expressions with multiple equality relations in a manner that is consistent with general usage in mathematics. For example, the expression codice_85 tests whether codice_74 is less than codice_76 and codice_76 is less than codice_89. C-derived languages interpret this expression differently: in C, the expression would first evaluate codice_90, resulting in 0 or 1, and that result would then be compared with codice_89.
Implementations.
Interpreters.
The main Python implementation, named "CPython", is written in C meeting the C89 standard. It compiles Python programs into intermediate bytecode, which is executed by the virtual machine. CPython is distributed with a large standard library written in a mixture of C and Python. It is available in versions for many platforms, including Microsoft Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform.
PyPy is a fast, compliant interpreter of Python 2.7. Its just-in-time compiler brings a significant speed improvement over CPython. A version taking advantage of multi-core processors using software transactional memory is in the works.
Stackless Python is a significant fork of CPython that implements microthreads; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.
Platform-specific implementations.
In 2005 Nokia released a Python interpreter for the Series 60 mobile phones called PyS60. It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. The Nokia N900 also supports Python with GTK widget libraries, with the feature that programs can be both written and run on the device itself. There is also a Python interpreter for Windows CE devices (including Pocket PC). It is called PythonCE. There are additional tools available for easy application and GUI development.
The PyMite virtual machine began in 2000 and made its first public appearance at PyCon 2003. PyMite was folded into Python-on-a-Chip in 2009. Python-on-a-Chip (p14p) is a project to develop a reduced Python virtual machine (codenamed PyMite) that runs a significant subset of the Python language on microcontrollers without an OS in as little as 4KB of RAM.
Around 2004, the Pyastra project created a specialized translator and assembler that targets resource-constrained microcontrollers.
Python is available on Android as an option as part of the Android Scripting Environment. or via the Python-for-android project, which produce native apk for android.
Python is available on iOS through the Kivy-ios project, allowing to build cross-platform OpenGL ES 2.0 Python applications.
Python shells and integrated development environments.
Most Python implementations (including CPython) can function as a command line interpreter, for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell. 
Other shells add capabilities beyond those in the basic interpreter, including IDLE and IPython. While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting.
In addition to standard desktop Python IDEs (integrated development environments), there are also browser-based IDEs, Sage, (intended for developing science and math-related Python programs), and a hosted IDE, pythonAnywhere.
Libraries.
Python standard library.
Python has a large standard library, commonly cited as one of Python's greatest strengths, providing tools suited to many tasks. This is deliberate and has been described as a "batteries included" Python philosophy.
For Internet-facing applications, a large number of standard formats and protocols (such as MIME and HTTP) are supported. Modules for creating graphical user interfaces, connecting to relational databases, arithmetic with arbitrary precision decimals, manipulating regular expressions, and doing unit testing are also included.
For software testing, the standard library provides the codice_92 and codice_93 modules.
Some parts of the standard library are covered by specifications (for example, the WSGI implementation codice_94 follows PEP 333), but the majority of the modules are not. They are specified by their code, internal documentation, and test suite (if supplied). However, because most of the standard library is cross-platform Python code, there are only a few modules that must be altered or completely rewritten by alternative implementations.
The standard library is not essential to run Python or embed Python within an application. Blender 2.49 for instance omits most of the standard library.
Third party libraries.
The Python Package Index, which is the official repository of third-party software for Python, contains over 25,000 "packages" covering a wide range of functionality, including : 
Embedding and extending Python.
Python can be "embedded" in C programs, and it can be "extended" by modules written in C, C++, or Cython.
"Embedding Python" adds scripting capabilities to existing applications. If the application is written in C (or a related language), the statement
makes the Python API available. After compilation, the code must be linked with "libpython".
"Extending Python" means providing Python with additional functionality coded in C, C++, or Cython. Cython is a compiled language, developed specifically to support writing Python extension modules. It is a superset of Python with syntax extensions for C and C++.
Extensions written in C or C++ are compiled and linked as a shared library, say 'extensions.so'. This library can then be imported as a module into Python,
To make this work, all function arguments must be valid Python types. This is usually achieved by Python-specific wrappers. Exporting entire classes from C++ is a relatively difficult exercise. Writing the necessary wrappers directly in C or C++ results in rather lengthy and tedious bookkeeping code. Therefore, different tool suites have been developed. SWIG (Simplified Wrapper and Interface Generator) supports Python among many other scripting languages. In contrast, the Boost library has a module BoostPython to specifically enable interoperability between C++ and Python; it is used in conjunction with the Py++ code generator.
Deployment of modules.
Two different Python programs may need two different versions of the same module or extension. To allow this, the extensions can be installed in virtual Python environments, using "virtualenv" or venv (in Python 3.3 and after). Alternatively, self-contained executables can be built from Python source, using third-party tools and/or Windows installers.
Influence on other languages.
Python's development practices have also been emulated by other languages. The practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python's case, a PEP) is also used in Tcl and Erlang because of Python's influence.
Trademark controversy.
In February, 2013, the Python Software Foundation reported that a British company was attempting to trade mark the name "Python" for use with computer software in Europe, which would mean that the name could not legally be used by others in the software arena for any goods, packaging, services, business papers or advertising without express consent. In the report, the Foundation listed ways in which users could support them in repelling the attempt to usurp the name.
