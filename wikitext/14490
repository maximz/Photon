In mathematics and computer programming, the order of operations (sometimes called operator precedence) is a rule used to clarify which procedures should be performed first in a given mathematical expression.
For example, in mathematics and most computer languages multiplication is done before addition; in the expression 2 + 3 × 4, the answer is 14. Brackets, "( and ), { and }, or [ and ]", which have their own rules, may be used to avoid confusion, thus the preceding expression may also be rendered 2 + (3 × 4), but the brackets are unnecessary as multiplication still has precedence without them.
Since the introduction of modern algebraic notation, multiplication has taken precedence over addition. Thus 3 + 4 × 5 = 4 × 5 + 3 = 23. When exponents were first introduced in the 16th and 17th centuries, exponents took precedence over both addition and multiplication and could be placed only as a superscript to the right of their base. Thus 3 + 52 = 28 and 3 × 52 = 75. To change the order of operations, originally a vinculum (an overline or underline) was used. Today, parentheses or brackets are used to explicitly denote precedence by grouping parts of an expression that should be evaluated first. Thus, to force addition to precede multiplication, we write (2 + 3) × 4 = 20, and to force addition to precede exponentiation, we write (3 + 5)2 = 64.
The standard order of operations.
This means that if a mathematical expression is preceded by one operator and followed by another, the operator higher on the list should be applied first. The commutative and associative laws of addition and multiplication allow terms to be added in any order and factors to be multiplied in any order, but mixed operations must obey the standard order of operations.
It is helpful to treat division as multiplication by the reciprocal (multiplicative inverse) and subtraction as addition of the opposite (additive inverse). Thus 3/4 = 3 ÷ 4 = 3 • ¼; in other words the quotient of 3 and 4 equals the product of 3 and  ¼. Also 3 − 4 = 3 + (−4); in other words the difference of 3 and 4 equals the sum of positive three and negative four. With this understanding, we can think of 1 − 3 + 7 as the sum of 1, negative 3, and 7, and add in any order: (1 − 3) + 7 = −2 + 7 = 5 and in reverse order (7 − 3) + 1 = 4 + 1 = 5. The important thing is to keep the negative sign with the 3.
The root symbol, √, requires a symbol of grouping around the radicand. The usual symbol of grouping is a bar (called vinculum) over the radicand. Other functions use parentheses around the input to avoid ambiguity. The parentheses are sometimes omitted if the input is a monomial. Thus, sin x = sin(x), but sin x + y = sin(x) + y, because x + y is not a monomial. Calculators usually require parentheses around all function inputs.
Stacked exponents are applied from the top down.
Symbols of grouping can be used to override the usual order of operations. Grouped symbols can be treated as a single expression. Symbols of grouping can be removed using the associative and distributive laws, also they can be removed if the expression inside the symbol of grouping is sufficiently simplified so no ambiguity results from their removal.
Examples.
For ease in reading, other grouping symbols such as braces, sometimes called curly braces { }, or brackets, sometimes called square brackets [ ], are often used along with parentheses ( ). For example,
Exceptions to the standard.
There exist differing conventions concerning the unary operator − (usually read "minus"). In written or printed mathematics, the expression −32 is interpreted to mean −(32) = −9, but in some applications and programming languages, notably the application Microsoft Office Excel and the programming language bc, unary operators have a higher priority than binary operators, that is, the unary minus (negation) has higher precedence than exponentiation, so in those languages −32 will be interpreted as (−3)2 = 9. In cases where there is the possibility that the notation might be misinterpreted, parentheses are usually used to clarify the intended meaning, however due to the syntax of most major programming languages, it is usually hard or impossible to be ambiguous.
Similarly, there can be ambiguity in the use of the slash ('/') symbol in expressions such as 1/2"x". If one rewrites this expression as 1 ÷ 2 × "x" and then interprets the division symbol as indicating multiplication by the reciprocal, this becomes
Hence, with this interpretation we have that 1/2"x" is equal to (1/2)"x", and not 1/(2"x"). However, there are examples, including in published literature, where implied multiplication is interpreted as having higher precedence than division, so that 1/2"x" equals 1/(2"x"), not (1/2)"x". For example, the manuscript submission instructions for the "Physical Review" journals state that multiplication is of higher precedence than division with a slash, and this is also the convention observed in prominent physics textbooks such as the "Course of Theoretical Physics" by Landau and Lifshitz and the "Feynman Lectures on Physics". Wolfram Alpha treats implied multiplication without parentheses the same as explicit multiplication and implied multiplication with parentheses. 2"x"/2"x", 2*"x"/2*"x", and 2(x)/2(x) all yield x2. The TI 89 and TI 86 calculators also yield "x"2 in all three cases.
Textbooks, tutorials and teachers generally highly recommend taking care to avoid writing potentially ambiguous expressions, using a horizontal fraction line format in handwritten documents or if mathematical typesetting is available, or by inserting additional parentheses.
Mnemonics.
Mnemonics are often used to help students remember the rules, but the rules taught by the use of acronyms can be misleading. In the United States the acronym PEMDAS is common. It stands for "P"arentheses, "E"xponents, "M"ultiplication, "D"ivision, "A"ddition, "S"ubtraction. PEMDAS is often expanded to "Please Excuse My Dear Aunt Sally" with the first letter of each word creating the acronym PEMDAS. Canada uses BEDMAS and the UK uses BIDMAS or BODMAS. 
In Canada and other English speaking countries, "P"arentheses may be called "B"rackets, or symbols of inclusion and "E"xponentiation may be called either "I"ndices, "P"owers or "O"rders, which have the same precedence as "R"oots or "R"adicals. Since multiplication and division are of equal precedence, "M" and "D" are often interchanged, leading to such acronyms as BOMDAS.
These mnemonics may be misleading when written this way, especially if the user is not aware that multiplication and division are of equal precedence, as are addition and subtraction. Using any of the above rules in the order "addition first, subtraction afterward" would also give the wrong answer to the problem
The correct answer is 9 (and not 5, which we get when we do the addition first and then the subtraction). The best way to understand a combination of addition and subtraction is to think of the subtraction as addition of a negative number. In this case, we see the problem as the sum of positive ten, negative three, and positive two.
P
E
MD 
AS
Or, simply as PEMA. PEMA is one of the mnemonics taught in New Zealand.
All of these acronyms conflate two different ideas, operations on the one hand and symbols of grouping on the other, which can lead to confusion.
Special cases.
An exclamation mark indicates that one should compute the factorial of the term immediately to its left, before computing any of the lower-precedence operations, unless grouping symbols dictate otherwise. But 23! means (23)! = 8! = 40320 while 23! = 26 = 64; a factorial in an exponent applies to the exponent, while a factorial not in the exponent applies to the entire power.
The application Microsoft Office Excel evaluates multiple exponentiations differently, however. ( a^b^c = (a^b)^c )
Sometimes a heavy dot is used as a multiplication sign which indicates that the entire expression before the heavy dot is multiplied by the entire expression after the heavy dot, but this notation may be misunderstood. Thus x + y • a + b may be used for (x + y)(a + b), but the latter notation is more common. However, many mathematical processors impose a "multiplication first" rule, thereby rendering x + (ya) + b.
Calculators.
Different calculators follow different orders of operations. Most non-scientific calculators without a stack work left to right without any priority given to different operators, for example giving
while more sophisticated calculators will use a more standard priority, for example giving
The Microsoft "Calculator" program uses the former in its standard view and the latter in its scientific and programmer views.
The non-scientific calculator expects two operands and an operator. When the next operator is pressed, the expression is immediately evaluated and the answer becomes the left hand of the next operator. Advanced calculators allow entry of the whole expression, grouped as necessary, and evaluates only when the user uses the equals sign.
The TI-92 associates to the right, that is
whereas, the TI-30XII associates to the left, that is
An expression like 1/2"x" is interpreted as 1/(2"x") by TI-82, but as (1/2)"x" by TI-83. While the first interpretation may be expected by some users, only the latter is in agreement with the standard rule that multiplication and division are of equal precedence, so 1/2"x" is read one divided by two and the answer multiplied by "x".
When the user is unsure how a calculator will interpret an expression, it is a good idea to use parentheses so there is no ambiguity.
Programming languages.
Many programming languages use precedence levels that conform to the order commonly used in mathematics, though some, such as APL and Smalltalk, have no operator precedence rules (in APL evaluation is strictly right to left, in Smalltalk it's strictly left to right).
Source-to-source compilers that compile to multiple languages need to explicitly deal with the issue of different order of operations across languages. Haxe for example standardizes the order and enforces it by inserting brackets where it is appropriate.
The accuracy of software developer knowledge about binary operator precedence has been found to closely follow their frequency of occurrence in source code.
